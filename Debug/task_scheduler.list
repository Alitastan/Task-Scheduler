
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011b4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080012f0  080012f0  000112f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013a0  080013a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000004  080013a4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  2000006c  0800140c  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e8  0800140c  000200e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000028a7  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000084a  00000000  00000000  0002293d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000001f8  00000000  00000000  00023188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000001b0  00000000  00000000  00023380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00002d18  00000000  00000000  00023530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001ab0  00000000  00000000  00026248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00009d30  00000000  00000000  00027cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00031a28  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d38  00000000  00000000  00031a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000006c 	.word	0x2000006c
 8000158:	00000000 	.word	0x00000000
 800015c:	080012d8 	.word	0x080012d8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000070 	.word	0x20000070
 8000178:	080012d8 	.word	0x080012d8

0800017c <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0

	uint32_t *pClkctrlreg = (uint32_t*) 0x5800004C;
 8000182:	4b1d      	ldr	r3, [pc, #116]	; (80001f8 <led_init_all+0x7c>)
 8000184:	607b      	str	r3, [r7, #4]
	uint32_t *pPortBmodereg = (uint32_t*) 0x48000400;
 8000186:	4b1d      	ldr	r3, [pc, #116]	; (80001fc <led_init_all+0x80>)
 8000188:	603b      	str	r3, [r7, #0]

	// 1. Enable the clock for GPIOB peripheral in the AHB2ENR
	*pClkctrlreg |= (1 << 1);
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f043 0202 	orr.w	r2, r3, #2
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	601a      	str	r2, [r3, #0]

	// 2. Configure the mode of the IO pin as output
	//a. Clear 11th, 10th, 1st and 0th bits
	*pPortBmodereg &= ~(3 << 10);
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	601a      	str	r2, [r3, #0]
	*pPortBmodereg &= ~(3 << 0);
 80001a2:	683b      	ldr	r3, [r7, #0]
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	f023 0203 	bic.w	r2, r3, #3
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	601a      	str	r2, [r3, #0]
	*pPortBmodereg &= ~(3 << 2);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f023 020c 	bic.w	r2, r3, #12
 80001b6:	683b      	ldr	r3, [r7, #0]
 80001b8:	601a      	str	r2, [r3, #0]

	//b. Set 10th bit to 1
	*pPortBmodereg |= (1 << 10); //BLUE
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	601a      	str	r2, [r3, #0]
	//b. Set 0th bit to 1
	*pPortBmodereg |= (1 << 0); // GREEN
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f043 0201 	orr.w	r2, r3, #1
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	601a      	str	r2, [r3, #0]
	//b. Set 1st bit to 1
	*pPortBmodereg |= (1 << 2); // RED
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f043 0204 	orr.w	r2, r3, #4
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f826 	bl	8000230 <led_off>
    led_off(LED_RED);
 80001e4:	2001      	movs	r0, #1
 80001e6:	f000 f823 	bl	8000230 <led_off>
    led_off(LED_BLUE);
 80001ea:	2005      	movs	r0, #5
 80001ec:	f000 f820 	bl	8000230 <led_off>



}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	5800004c 	.word	0x5800004c
 80001fc:	48000400 	.word	0x48000400

08000200 <led_on>:

void led_on(LED_COLORS colors)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]

	uint32_t *pPortBoutreg = (uint32_t*) 0x48000414;
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <led_on+0x2c>)
 800020c:	60fb      	str	r3, [r7, #12]
    *pPortBoutreg |= ( 1 << colors);
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	79fa      	ldrb	r2, [r7, #7]
 8000214:	2101      	movs	r1, #1
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	431a      	orrs	r2, r3
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	601a      	str	r2, [r3, #0]

}
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	48000414 	.word	0x48000414

08000230 <led_off>:

void led_off(LED_COLORS colors)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	uint32_t *pPortBoutreg = (uint32_t*) 0x48000414;
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <led_off+0x2c>)
 800023c:	60fb      	str	r3, [r7, #12]
	*pPortBoutreg &= ~( 1 << colors);
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	2101      	movs	r1, #1
 8000246:	fa01 f202 	lsl.w	r2, r1, r2
 800024a:	43d2      	mvns	r2, r2
 800024c:	401a      	ands	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	601a      	str	r2, [r3, #0]

}
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	48000414 	.word	0x48000414

08000260 <main>:
	void (*task_handler) (void);
}TCB_t;

TCB_t user_tasks[MAX_TASKS];
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000264:	f000 fa1c 	bl	80006a0 <enable_processor_faults>
	//Enable the MSP
	init_scheduler_stack(SCHED_STACK_START);
 8000268:	f04f 2020 	mov.w	r0, #536879104	; 0x20002000
 800026c:	f000 f87a 	bl	8000364 <init_scheduler_stack>

	//task handler addresses

	init_tasks_stack();
 8000270:	f000 f996 	bl	80005a0 <init_tasks_stack>

	led_init_all();
 8000274:	f7ff ff82 	bl	800017c <led_init_all>

	init_systick_timer(TICK_HZ);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f000 f83a 	bl	80002f4 <init_systick_timer>
	//Up to here the processor is using MSP
	switch_sp_to_psp();
 8000280:	f000 f8d6 	bl	8000430 <switch_sp_to_psp>

	task1_handler();
 8000284:	f000 f804 	bl	8000290 <task1_handler>
    /* Loop forever */
	for(;;);
 8000288:	e7fe      	b.n	8000288 <main+0x28>

0800028a <idle_task>:
}


void idle_task(void){
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
	while(1);
 800028e:	e7fe      	b.n	800028e <idle_task+0x4>

08000290 <task1_handler>:

//In this application tasks never return.
//These user tasks run in Thread mode of the processor.
//These tasks will be using PSP in order to trace the stack usage.

void task1_handler(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 8000294:	2005      	movs	r0, #5
 8000296:	f7ff ffb3 	bl	8000200 <led_on>
		task_delay(1000);
 800029a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029e:	f000 f8e7 	bl	8000470 <task_delay>
		led_off(LED_BLUE);
 80002a2:	2005      	movs	r0, #5
 80002a4:	f7ff ffc4 	bl	8000230 <led_off>
		task_delay(1000);
 80002a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ac:	f000 f8e0 	bl	8000470 <task_delay>
		led_on(LED_BLUE);
 80002b0:	e7f0      	b.n	8000294 <task1_handler+0x4>

080002b2 <task2_handler>:

	}

}
void task2_handler(void){
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ffa2 	bl	8000200 <led_on>
		task_delay(500);
 80002bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c0:	f000 f8d6 	bl	8000470 <task_delay>
		led_off(LED_GREEN);
 80002c4:	2000      	movs	r0, #0
 80002c6:	f7ff ffb3 	bl	8000230 <led_off>
		task_delay(500);
 80002ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ce:	f000 f8cf 	bl	8000470 <task_delay>
		led_on(LED_GREEN);
 80002d2:	e7f0      	b.n	80002b6 <task2_handler+0x4>

080002d4 <task3_handler>:
	}

}
void task3_handler(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 80002d8:	2001      	movs	r0, #1
 80002da:	f7ff ff91 	bl	8000200 <led_on>
		task_delay(250);
 80002de:	20fa      	movs	r0, #250	; 0xfa
 80002e0:	f000 f8c6 	bl	8000470 <task_delay>
		led_off(LED_RED);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f7ff ffa3 	bl	8000230 <led_off>
		task_delay(250);
 80002ea:	20fa      	movs	r0, #250	; 0xfa
 80002ec:	f000 f8c0 	bl	8000470 <task_delay>
		led_on(LED_RED);
 80002f0:	e7f2      	b.n	80002d8 <task3_handler+0x4>
	...

080002f4 <init_systick_timer>:
	}

}


void init_systick_timer(uint32_t tick_hz){
 80002f4:	b480      	push	{r7}
 80002f6:	b087      	sub	sp, #28
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80002fc:	4b16      	ldr	r3, [pc, #88]	; (8000358 <init_systick_timer+0x64>)
 80002fe:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <init_systick_timer+0x68>)
 8000302:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
 8000304:	4a16      	ldr	r2, [pc, #88]	; (8000360 <init_systick_timer+0x6c>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	fbb2 f3f3 	udiv	r3, r2, r3
 800030c:	3b01      	subs	r3, #1
 800030e:	60fb      	str	r3, [r7, #12]

	//Clear the value of SRVR
	*pSRVR &= ~(0xFFFFFF);
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	601a      	str	r2, [r3, #0]

	//load the value in SRVR
	*pSRVR |= count_value;
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	431a      	orrs	r2, r3
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	601a      	str	r2, [r3, #0]

	//do some settings

	*pSCSR |= (1 << 2); // Indicates the clock source as processor clock.
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f043 0204 	orr.w	r2, r3, #4
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 1); // Enables SysTick exception request.
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f043 0202 	orr.w	r2, r3, #2
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 0); // Enables the counter.
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f043 0201 	orr.w	r2, r3, #1
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	601a      	str	r2, [r3, #0]

}
 800034c:	bf00      	nop
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e000e014 	.word	0xe000e014
 800035c:	e000e010 	.word	0xe000e010
 8000360:	003d0900 	.word	0x003d0900

08000364 <init_scheduler_stack>:
//Start of the scheduler stack pointer should be stored in MSP
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 8000364:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": : "r" (sched_top_of_stack)		:	);
 8000366:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800036a:	4770      	bx	lr

}
 800036c:	bf00      	nop
	...

08000370 <get_psp_value>:


uint32_t get_psp_value(void){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <get_psp_value+0x18>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <get_psp_value+0x1c>)
 800037a:	011b      	lsls	r3, r3, #4
 800037c:	4413      	add	r3, r2
 800037e:	681b      	ldr	r3, [r3, #0]
}
 8000380:	4618      	mov	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	20000004 	.word	0x20000004
 800038c:	20000098 	.word	0x20000098

08000390 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <save_psp_value+0x20>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <save_psp_value+0x24>)
 800039e:	011b      	lsls	r3, r3, #4
 80003a0:	4413      	add	r3, r2
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	20000004 	.word	0x20000004
 80003b4:	20000098 	.word	0x20000098

080003b8 <update_next_task>:

void update_next_task(void){
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80003be:	23ff      	movs	r3, #255	; 0xff
 80003c0:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < (MAX_TASKS) ; i++){
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	e01e      	b.n	8000406 <update_next_task+0x4e>
		current_task++;
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <update_next_task+0x70>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <update_next_task+0x70>)
 80003d2:	701a      	strb	r2, [r3, #0]
		//current task should be within 3
		current_task %= MAX_TASKS;
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <update_next_task+0x70>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	f003 0303 	and.w	r3, r3, #3
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <update_next_task+0x70>)
 80003e0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <update_next_task+0x70>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4a11      	ldr	r2, [pc, #68]	; (800042c <update_next_task+0x74>)
 80003e8:	011b      	lsls	r3, r3, #4
 80003ea:	4413      	add	r3, r2
 80003ec:	3308      	adds	r3, #8
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	607b      	str	r3, [r7, #4]
		if ((state == TASK_READY_STATE) && (current_task != 0))
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d103      	bne.n	8000400 <update_next_task+0x48>
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <update_next_task+0x70>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d106      	bne.n	800040e <update_next_task+0x56>
	for (int i = 0; i < (MAX_TASKS) ; i++){
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	2b03      	cmp	r3, #3
 800040a:	dddd      	ble.n	80003c8 <update_next_task+0x10>
 800040c:	e000      	b.n	8000410 <update_next_task+0x58>
			break;
 800040e:	bf00      	nop
	}

	if(state != TASK_READY_STATE){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d002      	beq.n	800041c <update_next_task+0x64>
		current_task = 0;
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <update_next_task+0x70>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
	}

}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	20000004 	.word	0x20000004
 800042c:	20000098 	.word	0x20000098

08000430 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//1. Initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preseve LR which connects back to main()
 8000430:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000432:	f7ff ff9d 	bl	8000370 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 8000436:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); //pops back LR value
 800043a:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. Change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 800043e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000442:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000446:	4770      	bx	lr



}
 8000448:	bf00      	nop
	...

0800044c <schedule>:

void schedule(void){
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
	//pend the pendSV exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <schedule+0x20>)
 8000454:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]

}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	e000ed04 	.word	0xe000ed04

08000470 <task_delay>:


void task_delay(uint32_t tick_count){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	// tick_count is sent by the task
	//global tick count is maintained by the SysTick
	//disable interrupt
	INTERRUPT_DISABLE();
 8000478:	f04f 0001 	mov.w	r0, #1
 800047c:	f380 8810 	msr	PRIMASK, r0
	if(current_task){
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <task_delay+0x54>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d015      	beq.n	80004b4 <task_delay+0x44>
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <task_delay+0x58>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <task_delay+0x54>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	441a      	add	r2, r3
 8000496:	490d      	ldr	r1, [pc, #52]	; (80004cc <task_delay+0x5c>)
 8000498:	0103      	lsls	r3, r0, #4
 800049a:	440b      	add	r3, r1
 800049c:	3304      	adds	r3, #4
 800049e:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <task_delay+0x54>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4a09      	ldr	r2, [pc, #36]	; (80004cc <task_delay+0x5c>)
 80004a6:	011b      	lsls	r3, r3, #4
 80004a8:	4413      	add	r3, r2
 80004aa:	3308      	adds	r3, #8
 80004ac:	22ff      	movs	r2, #255	; 0xff
 80004ae:	701a      	strb	r2, [r3, #0]
		schedule();
 80004b0:	f7ff ffcc 	bl	800044c <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	f380 8810 	msr	PRIMASK, r0
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000004 	.word	0x20000004
 80004c8:	20000088 	.word	0x20000088
 80004cc:	20000098 	.word	0x20000098

080004d0 <update_global_tick_count>:




void update_global_tick_count(void){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	g_tick_count++;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <update_global_tick_count+0x18>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a03      	ldr	r2, [pc, #12]	; (80004e8 <update_global_tick_count+0x18>)
 80004dc:	6013      	str	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000088 	.word	0x20000088

080004ec <unblock_tasks>:

void unblock_tasks(void){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++){
 80004f2:	2301      	movs	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	e01b      	b.n	8000530 <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY_STATE){
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <unblock_tasks+0x58>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	011b      	lsls	r3, r3, #4
 80004fe:	4413      	add	r3, r2
 8000500:	3308      	adds	r3, #8
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d010      	beq.n	800052a <unblock_tasks+0x3e>
			if(user_tasks[i].block_count == g_tick_count){
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <unblock_tasks+0x58>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	011b      	lsls	r3, r3, #4
 800050e:	4413      	add	r3, r2
 8000510:	3304      	adds	r3, #4
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <unblock_tasks+0x5c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d106      	bne.n	800052a <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <unblock_tasks+0x58>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	011b      	lsls	r3, r3, #4
 8000522:	4413      	add	r3, r2
 8000524:	3308      	adds	r3, #8
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++){
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3301      	adds	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b03      	cmp	r3, #3
 8000534:	dde0      	ble.n	80004f8 <unblock_tasks+0xc>
			}
		}
	}
}
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000098 	.word	0x20000098
 8000548:	20000088 	.word	0x20000088

0800054c <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){
	/*Save the context of current task */
	//1. Get current running task's PSP value
	__asm volatile ("MRS R0, PSP");
 800054c:	f3ef 8009 	mrs	r0, PSP

	//2. Using that PSP value, store SF2(R4 to R11)
	//R0 updates the PSP value
	__asm volatile("STMDB R0!,{R4-R11}");
 8000550:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//3. Save the current value of PSP
	//Before using BL instruction LR must be saved
	//When this function is called argument current_psp_value will be updated with R0
	__asm volatile("PUSH {LR}");
 8000554:	b500      	push	{lr}

	__asm volatile("BL save_psp_value");
 8000556:	f7ff ff1b 	bl	8000390 <save_psp_value>



	/*Retrieve the context of next task */
	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 800055a:	f7ff ff2d 	bl	80003b8 <update_next_task>
	//2. Get its past PSP value
	__asm volatile ("BL get_psp_value");
 800055e:	f7ff ff07 	bl	8000370 <get_psp_value>
	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile("LDMIA R0!,{R4-R11}");
 8000562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. Update PSP and exit.
	__asm volatile("MSR PSP,R0");
 8000566:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800056a:	f85d eb04 	ldr.w	lr, [sp], #4

	//Exception exit happens when EXC_RETURN value is copied into PC
	__asm volatile("BX LR");
 800056e:	4770      	bx	lr

}
 8000570:	bf00      	nop
	...

08000574 <SysTick_Handler>:

//Can't use PUSH instructions in handler in this case because MSP would be affected.
void SysTick_Handler(void){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <SysTick_Handler+0x28>)
 800057c:	607b      	str	r3, [r7, #4]
	update_global_tick_count();
 800057e:	f7ff ffa7 	bl	80004d0 <update_global_tick_count>
	unblock_tasks();
 8000582:	f7ff ffb3 	bl	80004ec <unblock_tasks>
	//pend the pendsv exception
	*pICSR |= (1 << 28);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	e000ed04 	.word	0xe000ed04

080005a0 <init_tasks_stack>:

//global variable to store PSP values of different tasks.



void init_tasks_stack(void){
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 80005a6:	4b35      	ldr	r3, [pc, #212]	; (800067c <init_tasks_stack+0xdc>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <init_tasks_stack+0xdc>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <init_tasks_stack+0xdc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <init_tasks_stack+0xdc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


	user_tasks[0].psp_value = IDLE_STACK_START;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <init_tasks_stack+0xdc>)
 80005c4:	4a2e      	ldr	r2, [pc, #184]	; (8000680 <init_tasks_stack+0xe0>)
 80005c6:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <init_tasks_stack+0xdc>)
 80005ca:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <init_tasks_stack+0xe4>)
 80005cc:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <init_tasks_stack+0xdc>)
 80005d0:	4a2d      	ldr	r2, [pc, #180]	; (8000688 <init_tasks_stack+0xe8>)
 80005d2:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <init_tasks_stack+0xdc>)
 80005d6:	4a2d      	ldr	r2, [pc, #180]	; (800068c <init_tasks_stack+0xec>)
 80005d8:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = idle_task;
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <init_tasks_stack+0xdc>)
 80005dc:	4a2c      	ldr	r2, [pc, #176]	; (8000690 <init_tasks_stack+0xf0>)
 80005de:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <init_tasks_stack+0xdc>)
 80005e2:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <init_tasks_stack+0xf4>)
 80005e4:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <init_tasks_stack+0xdc>)
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <init_tasks_stack+0xf8>)
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <init_tasks_stack+0xdc>)
 80005ee:	4a2b      	ldr	r2, [pc, #172]	; (800069c <init_tasks_stack+0xfc>)
 80005f0:	63da      	str	r2, [r3, #60]	; 0x3c



	uint32_t *pPSP;
	for(int i = 0 ; i < MAX_TASKS ; i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	e037      	b.n	8000668 <init_tasks_stack+0xc8>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <init_tasks_stack+0xdc>)
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	4413      	add	r3, r2
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60fb      	str	r3, [r7, #12]
		pPSP--;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3b04      	subs	r3, #4
 8000608:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000U
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000610:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3b04      	subs	r3, #4
 8000616:	60fb      	str	r3, [r7, #12]
		//Task handler addresses must be odd for T-bit.
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000618:	4a18      	ldr	r2, [pc, #96]	; (800067c <init_tasks_stack+0xdc>)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	4413      	add	r3, r2
 8000620:	330c      	adds	r3, #12
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	3b04      	subs	r3, #4
 800062e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f06f 0202 	mvn.w	r2, #2
 8000636:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13 ; j++){
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	e008      	b.n	8000650 <init_tasks_stack+0xb0>
			pPSP--;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3b04      	subs	r3, #4
 8000642:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13 ; j++){
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b0c      	cmp	r3, #12
 8000654:	ddf3      	ble.n	800063e <init_tasks_stack+0x9e>
		}
		//Preserve the values of PSP
		user_tasks[i].psp_value = (uint32_t)pPSP;
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	4908      	ldr	r1, [pc, #32]	; (800067c <init_tasks_stack+0xdc>)
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	440b      	add	r3, r1
 8000660:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ; i++){
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3301      	adds	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b03      	cmp	r3, #3
 800066c:	ddc4      	ble.n	80005f8 <init_tasks_stack+0x58>


	}

}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000098 	.word	0x20000098
 8000680:	20002400 	.word	0x20002400
 8000684:	20003000 	.word	0x20003000
 8000688:	20002c00 	.word	0x20002c00
 800068c:	20002800 	.word	0x20002800
 8000690:	0800028b 	.word	0x0800028b
 8000694:	08000291 	.word	0x08000291
 8000698:	080002b3 	.word	0x080002b3
 800069c:	080002d5 	.word	0x080002d5

080006a0 <enable_processor_faults>:

void enable_processor_faults(void){
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <enable_processor_faults+0x38>)
 80006a8:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); // memmenage fault enabled
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // bus fault enabled
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // usage fault enabled
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	e000ed24 	.word	0xe000ed24

080006dc <HardFault_Handler>:

//Implementation of the fault handlers.
void HardFault_Handler(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 80006e0:	4801      	ldr	r0, [pc, #4]	; (80006e8 <HardFault_Handler+0xc>)
 80006e2:	f000 f9a3 	bl	8000a2c <puts>
	while(1);
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0xa>
 80006e8:	080012f0 	.word	0x080012f0

080006ec <MemManage_Handler>:

}

void MemManage_Handler(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	printf("Exception : MemMenage\n");
 80006f0:	4801      	ldr	r0, [pc, #4]	; (80006f8 <MemManage_Handler+0xc>)
 80006f2:	f000 f99b 	bl	8000a2c <puts>
	while(1);
 80006f6:	e7fe      	b.n	80006f6 <MemManage_Handler+0xa>
 80006f8:	08001308 	.word	0x08001308

080006fc <BusFault_Handler>:

}

void BusFault_Handler(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000700:	4801      	ldr	r0, [pc, #4]	; (8000708 <BusFault_Handler+0xc>)
 8000702:	f000 f993 	bl	8000a2c <puts>
	while(1);
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0xa>
 8000708:	08001320 	.word	0x08001320

0800070c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <ITM_SendChar+0x44>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <ITM_SendChar+0x44>)
 800071c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000720:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <ITM_SendChar+0x48>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <ITM_SendChar+0x48>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800072e:	bf00      	nop
 8000730:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f8      	beq.n	8000730 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800073e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	6013      	str	r3, [r2, #0]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	e000edfc 	.word	0xe000edfc
 8000754:	e0000e00 	.word	0xe0000e00

08000758 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	e00a      	b.n	8000780 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800076a:	f3af 8000 	nop.w
 800076e:	4601      	mov	r1, r0
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	b2ca      	uxtb	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf0      	blt.n	800076a <_read+0x12>
	}

return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	e009      	b.n	80007b8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	60ba      	str	r2, [r7, #8]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ffad 	bl	800070c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf1      	blt.n	80007a4 <_write+0x12>
	}
	return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_close>:

int _close(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
	return -1;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f0:	605a      	str	r2, [r3, #4]
	return 0;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <_isatty>:

int _isatty(int file)
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
	return 1;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
	return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <_sbrk+0x5c>)
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <_sbrk+0x60>)
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <_sbrk+0x64>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <_sbrk+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d207      	bcs.n	800086c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800085c:	f000 f846 	bl	80008ec <__errno>
 8000860:	4603      	mov	r3, r0
 8000862:	220c      	movs	r2, #12
 8000864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	e009      	b.n	8000880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_sbrk+0x64>)
 800087c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20003000 	.word	0x20003000
 800088c:	00000400 	.word	0x00000400
 8000890:	2000008c 	.word	0x2000008c
 8000894:	200000e8 	.word	0x200000e8

08000898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800089c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LoopForever+0xe>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	; (80008e4 <LoopForever+0x16>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008c6:	f000 f817 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fcc9 	bl	8000260 <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   r0, =_estack
 80008d0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008d4:	20000004 	.word	0x20000004
  ldr r1, =_edata
 80008d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008dc:	080013a4 	.word	0x080013a4
  ldr r2, =_sbss
 80008e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008e4:	200000e8 	.word	0x200000e8

080008e8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_IRQHandler>
	...

080008ec <__errno>:
 80008ec:	4b01      	ldr	r3, [pc, #4]	; (80008f4 <__errno+0x8>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4d0d      	ldr	r5, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2600      	movs	r6, #0
 8000904:	42a6      	cmp	r6, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4d0b      	ldr	r5, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 fce4 	bl	80012d8 <_init>
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2600      	movs	r6, #0
 8000916:	42a6      	cmp	r6, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000920:	4798      	blx	r3
 8000922:	3601      	adds	r6, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f855 3b04 	ldr.w	r3, [r5], #4
 800092a:	4798      	blx	r3
 800092c:	3601      	adds	r6, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	0800139c 	.word	0x0800139c
 8000934:	0800139c 	.word	0x0800139c
 8000938:	0800139c 	.word	0x0800139c
 800093c:	080013a0 	.word	0x080013a0

08000940 <memset>:
 8000940:	4402      	add	r2, r0
 8000942:	4603      	mov	r3, r0
 8000944:	4293      	cmp	r3, r2
 8000946:	d100      	bne.n	800094a <memset+0xa>
 8000948:	4770      	bx	lr
 800094a:	f803 1b01 	strb.w	r1, [r3], #1
 800094e:	e7f9      	b.n	8000944 <memset+0x4>

08000950 <_puts_r>:
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	460e      	mov	r6, r1
 8000954:	4605      	mov	r5, r0
 8000956:	b118      	cbz	r0, 8000960 <_puts_r+0x10>
 8000958:	6983      	ldr	r3, [r0, #24]
 800095a:	b90b      	cbnz	r3, 8000960 <_puts_r+0x10>
 800095c:	f000 fa48 	bl	8000df0 <__sinit>
 8000960:	69ab      	ldr	r3, [r5, #24]
 8000962:	68ac      	ldr	r4, [r5, #8]
 8000964:	b913      	cbnz	r3, 800096c <_puts_r+0x1c>
 8000966:	4628      	mov	r0, r5
 8000968:	f000 fa42 	bl	8000df0 <__sinit>
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <_puts_r+0xd0>)
 800096e:	429c      	cmp	r4, r3
 8000970:	d120      	bne.n	80009b4 <_puts_r+0x64>
 8000972:	686c      	ldr	r4, [r5, #4]
 8000974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000976:	07db      	lsls	r3, r3, #31
 8000978:	d405      	bmi.n	8000986 <_puts_r+0x36>
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	0598      	lsls	r0, r3, #22
 800097e:	d402      	bmi.n	8000986 <_puts_r+0x36>
 8000980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000982:	f000 fad3 	bl	8000f2c <__retarget_lock_acquire_recursive>
 8000986:	89a3      	ldrh	r3, [r4, #12]
 8000988:	0719      	lsls	r1, r3, #28
 800098a:	d51d      	bpl.n	80009c8 <_puts_r+0x78>
 800098c:	6923      	ldr	r3, [r4, #16]
 800098e:	b1db      	cbz	r3, 80009c8 <_puts_r+0x78>
 8000990:	3e01      	subs	r6, #1
 8000992:	68a3      	ldr	r3, [r4, #8]
 8000994:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000998:	3b01      	subs	r3, #1
 800099a:	60a3      	str	r3, [r4, #8]
 800099c:	bb39      	cbnz	r1, 80009ee <_puts_r+0x9e>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da38      	bge.n	8000a14 <_puts_r+0xc4>
 80009a2:	4622      	mov	r2, r4
 80009a4:	210a      	movs	r1, #10
 80009a6:	4628      	mov	r0, r5
 80009a8:	f000 f848 	bl	8000a3c <__swbuf_r>
 80009ac:	3001      	adds	r0, #1
 80009ae:	d011      	beq.n	80009d4 <_puts_r+0x84>
 80009b0:	250a      	movs	r5, #10
 80009b2:	e011      	b.n	80009d8 <_puts_r+0x88>
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <_puts_r+0xd4>)
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d101      	bne.n	80009be <_puts_r+0x6e>
 80009ba:	68ac      	ldr	r4, [r5, #8]
 80009bc:	e7da      	b.n	8000974 <_puts_r+0x24>
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <_puts_r+0xd8>)
 80009c0:	429c      	cmp	r4, r3
 80009c2:	bf08      	it	eq
 80009c4:	68ec      	ldreq	r4, [r5, #12]
 80009c6:	e7d5      	b.n	8000974 <_puts_r+0x24>
 80009c8:	4621      	mov	r1, r4
 80009ca:	4628      	mov	r0, r5
 80009cc:	f000 f888 	bl	8000ae0 <__swsetup_r>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d0dd      	beq.n	8000990 <_puts_r+0x40>
 80009d4:	f04f 35ff 	mov.w	r5, #4294967295
 80009d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009da:	07da      	lsls	r2, r3, #31
 80009dc:	d405      	bmi.n	80009ea <_puts_r+0x9a>
 80009de:	89a3      	ldrh	r3, [r4, #12]
 80009e0:	059b      	lsls	r3, r3, #22
 80009e2:	d402      	bmi.n	80009ea <_puts_r+0x9a>
 80009e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009e6:	f000 faa2 	bl	8000f2e <__retarget_lock_release_recursive>
 80009ea:	4628      	mov	r0, r5
 80009ec:	bd70      	pop	{r4, r5, r6, pc}
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da04      	bge.n	80009fc <_puts_r+0xac>
 80009f2:	69a2      	ldr	r2, [r4, #24]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dc06      	bgt.n	8000a06 <_puts_r+0xb6>
 80009f8:	290a      	cmp	r1, #10
 80009fa:	d004      	beq.n	8000a06 <_puts_r+0xb6>
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	6022      	str	r2, [r4, #0]
 8000a02:	7019      	strb	r1, [r3, #0]
 8000a04:	e7c5      	b.n	8000992 <_puts_r+0x42>
 8000a06:	4622      	mov	r2, r4
 8000a08:	4628      	mov	r0, r5
 8000a0a:	f000 f817 	bl	8000a3c <__swbuf_r>
 8000a0e:	3001      	adds	r0, #1
 8000a10:	d1bf      	bne.n	8000992 <_puts_r+0x42>
 8000a12:	e7df      	b.n	80009d4 <_puts_r+0x84>
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	250a      	movs	r5, #10
 8000a18:	1c5a      	adds	r2, r3, #1
 8000a1a:	6022      	str	r2, [r4, #0]
 8000a1c:	701d      	strb	r5, [r3, #0]
 8000a1e:	e7db      	b.n	80009d8 <_puts_r+0x88>
 8000a20:	0800135c 	.word	0x0800135c
 8000a24:	0800137c 	.word	0x0800137c
 8000a28:	0800133c 	.word	0x0800133c

08000a2c <puts>:
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <puts+0xc>)
 8000a2e:	4601      	mov	r1, r0
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	f7ff bf8d 	b.w	8000950 <_puts_r>
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008

08000a3c <__swbuf_r>:
 8000a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3e:	460e      	mov	r6, r1
 8000a40:	4614      	mov	r4, r2
 8000a42:	4605      	mov	r5, r0
 8000a44:	b118      	cbz	r0, 8000a4e <__swbuf_r+0x12>
 8000a46:	6983      	ldr	r3, [r0, #24]
 8000a48:	b90b      	cbnz	r3, 8000a4e <__swbuf_r+0x12>
 8000a4a:	f000 f9d1 	bl	8000df0 <__sinit>
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <__swbuf_r+0x98>)
 8000a50:	429c      	cmp	r4, r3
 8000a52:	d12b      	bne.n	8000aac <__swbuf_r+0x70>
 8000a54:	686c      	ldr	r4, [r5, #4]
 8000a56:	69a3      	ldr	r3, [r4, #24]
 8000a58:	60a3      	str	r3, [r4, #8]
 8000a5a:	89a3      	ldrh	r3, [r4, #12]
 8000a5c:	071a      	lsls	r2, r3, #28
 8000a5e:	d52f      	bpl.n	8000ac0 <__swbuf_r+0x84>
 8000a60:	6923      	ldr	r3, [r4, #16]
 8000a62:	b36b      	cbz	r3, 8000ac0 <__swbuf_r+0x84>
 8000a64:	6923      	ldr	r3, [r4, #16]
 8000a66:	6820      	ldr	r0, [r4, #0]
 8000a68:	1ac0      	subs	r0, r0, r3
 8000a6a:	6963      	ldr	r3, [r4, #20]
 8000a6c:	b2f6      	uxtb	r6, r6
 8000a6e:	4283      	cmp	r3, r0
 8000a70:	4637      	mov	r7, r6
 8000a72:	dc04      	bgt.n	8000a7e <__swbuf_r+0x42>
 8000a74:	4621      	mov	r1, r4
 8000a76:	4628      	mov	r0, r5
 8000a78:	f000 f926 	bl	8000cc8 <_fflush_r>
 8000a7c:	bb30      	cbnz	r0, 8000acc <__swbuf_r+0x90>
 8000a7e:	68a3      	ldr	r3, [r4, #8]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	60a3      	str	r3, [r4, #8]
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	6022      	str	r2, [r4, #0]
 8000a8a:	701e      	strb	r6, [r3, #0]
 8000a8c:	6963      	ldr	r3, [r4, #20]
 8000a8e:	3001      	adds	r0, #1
 8000a90:	4283      	cmp	r3, r0
 8000a92:	d004      	beq.n	8000a9e <__swbuf_r+0x62>
 8000a94:	89a3      	ldrh	r3, [r4, #12]
 8000a96:	07db      	lsls	r3, r3, #31
 8000a98:	d506      	bpl.n	8000aa8 <__swbuf_r+0x6c>
 8000a9a:	2e0a      	cmp	r6, #10
 8000a9c:	d104      	bne.n	8000aa8 <__swbuf_r+0x6c>
 8000a9e:	4621      	mov	r1, r4
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	f000 f911 	bl	8000cc8 <_fflush_r>
 8000aa6:	b988      	cbnz	r0, 8000acc <__swbuf_r+0x90>
 8000aa8:	4638      	mov	r0, r7
 8000aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <__swbuf_r+0x9c>)
 8000aae:	429c      	cmp	r4, r3
 8000ab0:	d101      	bne.n	8000ab6 <__swbuf_r+0x7a>
 8000ab2:	68ac      	ldr	r4, [r5, #8]
 8000ab4:	e7cf      	b.n	8000a56 <__swbuf_r+0x1a>
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <__swbuf_r+0xa0>)
 8000ab8:	429c      	cmp	r4, r3
 8000aba:	bf08      	it	eq
 8000abc:	68ec      	ldreq	r4, [r5, #12]
 8000abe:	e7ca      	b.n	8000a56 <__swbuf_r+0x1a>
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f000 f80c 	bl	8000ae0 <__swsetup_r>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d0cb      	beq.n	8000a64 <__swbuf_r+0x28>
 8000acc:	f04f 37ff 	mov.w	r7, #4294967295
 8000ad0:	e7ea      	b.n	8000aa8 <__swbuf_r+0x6c>
 8000ad2:	bf00      	nop
 8000ad4:	0800135c 	.word	0x0800135c
 8000ad8:	0800137c 	.word	0x0800137c
 8000adc:	0800133c 	.word	0x0800133c

08000ae0 <__swsetup_r>:
 8000ae0:	4b32      	ldr	r3, [pc, #200]	; (8000bac <__swsetup_r+0xcc>)
 8000ae2:	b570      	push	{r4, r5, r6, lr}
 8000ae4:	681d      	ldr	r5, [r3, #0]
 8000ae6:	4606      	mov	r6, r0
 8000ae8:	460c      	mov	r4, r1
 8000aea:	b125      	cbz	r5, 8000af6 <__swsetup_r+0x16>
 8000aec:	69ab      	ldr	r3, [r5, #24]
 8000aee:	b913      	cbnz	r3, 8000af6 <__swsetup_r+0x16>
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 f97d 	bl	8000df0 <__sinit>
 8000af6:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <__swsetup_r+0xd0>)
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d10f      	bne.n	8000b1c <__swsetup_r+0x3c>
 8000afc:	686c      	ldr	r4, [r5, #4]
 8000afe:	89a3      	ldrh	r3, [r4, #12]
 8000b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b04:	0719      	lsls	r1, r3, #28
 8000b06:	d42c      	bmi.n	8000b62 <__swsetup_r+0x82>
 8000b08:	06dd      	lsls	r5, r3, #27
 8000b0a:	d411      	bmi.n	8000b30 <__swsetup_r+0x50>
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	6033      	str	r3, [r6, #0]
 8000b10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b14:	81a3      	strh	r3, [r4, #12]
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	e03e      	b.n	8000b9a <__swsetup_r+0xba>
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <__swsetup_r+0xd4>)
 8000b1e:	429c      	cmp	r4, r3
 8000b20:	d101      	bne.n	8000b26 <__swsetup_r+0x46>
 8000b22:	68ac      	ldr	r4, [r5, #8]
 8000b24:	e7eb      	b.n	8000afe <__swsetup_r+0x1e>
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <__swsetup_r+0xd8>)
 8000b28:	429c      	cmp	r4, r3
 8000b2a:	bf08      	it	eq
 8000b2c:	68ec      	ldreq	r4, [r5, #12]
 8000b2e:	e7e6      	b.n	8000afe <__swsetup_r+0x1e>
 8000b30:	0758      	lsls	r0, r3, #29
 8000b32:	d512      	bpl.n	8000b5a <__swsetup_r+0x7a>
 8000b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b36:	b141      	cbz	r1, 8000b4a <__swsetup_r+0x6a>
 8000b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d002      	beq.n	8000b46 <__swsetup_r+0x66>
 8000b40:	4630      	mov	r0, r6
 8000b42:	f000 fa59 	bl	8000ff8 <_free_r>
 8000b46:	2300      	movs	r3, #0
 8000b48:	6363      	str	r3, [r4, #52]	; 0x34
 8000b4a:	89a3      	ldrh	r3, [r4, #12]
 8000b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b50:	81a3      	strh	r3, [r4, #12]
 8000b52:	2300      	movs	r3, #0
 8000b54:	6063      	str	r3, [r4, #4]
 8000b56:	6923      	ldr	r3, [r4, #16]
 8000b58:	6023      	str	r3, [r4, #0]
 8000b5a:	89a3      	ldrh	r3, [r4, #12]
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	81a3      	strh	r3, [r4, #12]
 8000b62:	6923      	ldr	r3, [r4, #16]
 8000b64:	b94b      	cbnz	r3, 8000b7a <__swsetup_r+0x9a>
 8000b66:	89a3      	ldrh	r3, [r4, #12]
 8000b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b70:	d003      	beq.n	8000b7a <__swsetup_r+0x9a>
 8000b72:	4621      	mov	r1, r4
 8000b74:	4630      	mov	r0, r6
 8000b76:	f000 f9ff 	bl	8000f78 <__smakebuf_r>
 8000b7a:	89a0      	ldrh	r0, [r4, #12]
 8000b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b80:	f010 0301 	ands.w	r3, r0, #1
 8000b84:	d00a      	beq.n	8000b9c <__swsetup_r+0xbc>
 8000b86:	2300      	movs	r3, #0
 8000b88:	60a3      	str	r3, [r4, #8]
 8000b8a:	6963      	ldr	r3, [r4, #20]
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	61a3      	str	r3, [r4, #24]
 8000b90:	6923      	ldr	r3, [r4, #16]
 8000b92:	b943      	cbnz	r3, 8000ba6 <__swsetup_r+0xc6>
 8000b94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b98:	d1ba      	bne.n	8000b10 <__swsetup_r+0x30>
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	0781      	lsls	r1, r0, #30
 8000b9e:	bf58      	it	pl
 8000ba0:	6963      	ldrpl	r3, [r4, #20]
 8000ba2:	60a3      	str	r3, [r4, #8]
 8000ba4:	e7f4      	b.n	8000b90 <__swsetup_r+0xb0>
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	e7f7      	b.n	8000b9a <__swsetup_r+0xba>
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	0800135c 	.word	0x0800135c
 8000bb4:	0800137c 	.word	0x0800137c
 8000bb8:	0800133c 	.word	0x0800133c

08000bbc <__sflush_r>:
 8000bbc:	898a      	ldrh	r2, [r1, #12]
 8000bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc2:	4605      	mov	r5, r0
 8000bc4:	0710      	lsls	r0, r2, #28
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	d458      	bmi.n	8000c7c <__sflush_r+0xc0>
 8000bca:	684b      	ldr	r3, [r1, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	dc05      	bgt.n	8000bdc <__sflush_r+0x20>
 8000bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	dc02      	bgt.n	8000bdc <__sflush_r+0x20>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d0f9      	beq.n	8000bd6 <__sflush_r+0x1a>
 8000be2:	2300      	movs	r3, #0
 8000be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000be8:	682f      	ldr	r7, [r5, #0]
 8000bea:	602b      	str	r3, [r5, #0]
 8000bec:	d032      	beq.n	8000c54 <__sflush_r+0x98>
 8000bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	075a      	lsls	r2, r3, #29
 8000bf4:	d505      	bpl.n	8000c02 <__sflush_r+0x46>
 8000bf6:	6863      	ldr	r3, [r4, #4]
 8000bf8:	1ac0      	subs	r0, r0, r3
 8000bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bfc:	b10b      	cbz	r3, 8000c02 <__sflush_r+0x46>
 8000bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c00:	1ac0      	subs	r0, r0, r3
 8000c02:	2300      	movs	r3, #0
 8000c04:	4602      	mov	r2, r0
 8000c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c08:	6a21      	ldr	r1, [r4, #32]
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	47b0      	blx	r6
 8000c0e:	1c43      	adds	r3, r0, #1
 8000c10:	89a3      	ldrh	r3, [r4, #12]
 8000c12:	d106      	bne.n	8000c22 <__sflush_r+0x66>
 8000c14:	6829      	ldr	r1, [r5, #0]
 8000c16:	291d      	cmp	r1, #29
 8000c18:	d82c      	bhi.n	8000c74 <__sflush_r+0xb8>
 8000c1a:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <__sflush_r+0x108>)
 8000c1c:	40ca      	lsrs	r2, r1
 8000c1e:	07d6      	lsls	r6, r2, #31
 8000c20:	d528      	bpl.n	8000c74 <__sflush_r+0xb8>
 8000c22:	2200      	movs	r2, #0
 8000c24:	6062      	str	r2, [r4, #4]
 8000c26:	04d9      	lsls	r1, r3, #19
 8000c28:	6922      	ldr	r2, [r4, #16]
 8000c2a:	6022      	str	r2, [r4, #0]
 8000c2c:	d504      	bpl.n	8000c38 <__sflush_r+0x7c>
 8000c2e:	1c42      	adds	r2, r0, #1
 8000c30:	d101      	bne.n	8000c36 <__sflush_r+0x7a>
 8000c32:	682b      	ldr	r3, [r5, #0]
 8000c34:	b903      	cbnz	r3, 8000c38 <__sflush_r+0x7c>
 8000c36:	6560      	str	r0, [r4, #84]	; 0x54
 8000c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c3a:	602f      	str	r7, [r5, #0]
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	d0ca      	beq.n	8000bd6 <__sflush_r+0x1a>
 8000c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d002      	beq.n	8000c4e <__sflush_r+0x92>
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f000 f9d5 	bl	8000ff8 <_free_r>
 8000c4e:	2000      	movs	r0, #0
 8000c50:	6360      	str	r0, [r4, #52]	; 0x34
 8000c52:	e7c1      	b.n	8000bd8 <__sflush_r+0x1c>
 8000c54:	6a21      	ldr	r1, [r4, #32]
 8000c56:	2301      	movs	r3, #1
 8000c58:	4628      	mov	r0, r5
 8000c5a:	47b0      	blx	r6
 8000c5c:	1c41      	adds	r1, r0, #1
 8000c5e:	d1c7      	bne.n	8000bf0 <__sflush_r+0x34>
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0c4      	beq.n	8000bf0 <__sflush_r+0x34>
 8000c66:	2b1d      	cmp	r3, #29
 8000c68:	d001      	beq.n	8000c6e <__sflush_r+0xb2>
 8000c6a:	2b16      	cmp	r3, #22
 8000c6c:	d101      	bne.n	8000c72 <__sflush_r+0xb6>
 8000c6e:	602f      	str	r7, [r5, #0]
 8000c70:	e7b1      	b.n	8000bd6 <__sflush_r+0x1a>
 8000c72:	89a3      	ldrh	r3, [r4, #12]
 8000c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c78:	81a3      	strh	r3, [r4, #12]
 8000c7a:	e7ad      	b.n	8000bd8 <__sflush_r+0x1c>
 8000c7c:	690f      	ldr	r7, [r1, #16]
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d0a9      	beq.n	8000bd6 <__sflush_r+0x1a>
 8000c82:	0793      	lsls	r3, r2, #30
 8000c84:	680e      	ldr	r6, [r1, #0]
 8000c86:	bf08      	it	eq
 8000c88:	694b      	ldreq	r3, [r1, #20]
 8000c8a:	600f      	str	r7, [r1, #0]
 8000c8c:	bf18      	it	ne
 8000c8e:	2300      	movne	r3, #0
 8000c90:	eba6 0807 	sub.w	r8, r6, r7
 8000c94:	608b      	str	r3, [r1, #8]
 8000c96:	f1b8 0f00 	cmp.w	r8, #0
 8000c9a:	dd9c      	ble.n	8000bd6 <__sflush_r+0x1a>
 8000c9c:	6a21      	ldr	r1, [r4, #32]
 8000c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000ca0:	4643      	mov	r3, r8
 8000ca2:	463a      	mov	r2, r7
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	47b0      	blx	r6
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	dc06      	bgt.n	8000cba <__sflush_r+0xfe>
 8000cac:	89a3      	ldrh	r3, [r4, #12]
 8000cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb2:	81a3      	strh	r3, [r4, #12]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	e78e      	b.n	8000bd8 <__sflush_r+0x1c>
 8000cba:	4407      	add	r7, r0
 8000cbc:	eba8 0800 	sub.w	r8, r8, r0
 8000cc0:	e7e9      	b.n	8000c96 <__sflush_r+0xda>
 8000cc2:	bf00      	nop
 8000cc4:	20400001 	.word	0x20400001

08000cc8 <_fflush_r>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	690b      	ldr	r3, [r1, #16]
 8000ccc:	4605      	mov	r5, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	b913      	cbnz	r3, 8000cd8 <_fflush_r+0x10>
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	4628      	mov	r0, r5
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	b118      	cbz	r0, 8000ce2 <_fflush_r+0x1a>
 8000cda:	6983      	ldr	r3, [r0, #24]
 8000cdc:	b90b      	cbnz	r3, 8000ce2 <_fflush_r+0x1a>
 8000cde:	f000 f887 	bl	8000df0 <__sinit>
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <_fflush_r+0x6c>)
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	d11b      	bne.n	8000d20 <_fflush_r+0x58>
 8000ce8:	686c      	ldr	r4, [r5, #4]
 8000cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0ef      	beq.n	8000cd2 <_fflush_r+0xa>
 8000cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000cf4:	07d0      	lsls	r0, r2, #31
 8000cf6:	d404      	bmi.n	8000d02 <_fflush_r+0x3a>
 8000cf8:	0599      	lsls	r1, r3, #22
 8000cfa:	d402      	bmi.n	8000d02 <_fflush_r+0x3a>
 8000cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cfe:	f000 f915 	bl	8000f2c <__retarget_lock_acquire_recursive>
 8000d02:	4628      	mov	r0, r5
 8000d04:	4621      	mov	r1, r4
 8000d06:	f7ff ff59 	bl	8000bbc <__sflush_r>
 8000d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d0c:	07da      	lsls	r2, r3, #31
 8000d0e:	4605      	mov	r5, r0
 8000d10:	d4e0      	bmi.n	8000cd4 <_fflush_r+0xc>
 8000d12:	89a3      	ldrh	r3, [r4, #12]
 8000d14:	059b      	lsls	r3, r3, #22
 8000d16:	d4dd      	bmi.n	8000cd4 <_fflush_r+0xc>
 8000d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d1a:	f000 f908 	bl	8000f2e <__retarget_lock_release_recursive>
 8000d1e:	e7d9      	b.n	8000cd4 <_fflush_r+0xc>
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <_fflush_r+0x70>)
 8000d22:	429c      	cmp	r4, r3
 8000d24:	d101      	bne.n	8000d2a <_fflush_r+0x62>
 8000d26:	68ac      	ldr	r4, [r5, #8]
 8000d28:	e7df      	b.n	8000cea <_fflush_r+0x22>
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <_fflush_r+0x74>)
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	bf08      	it	eq
 8000d30:	68ec      	ldreq	r4, [r5, #12]
 8000d32:	e7da      	b.n	8000cea <_fflush_r+0x22>
 8000d34:	0800135c 	.word	0x0800135c
 8000d38:	0800137c 	.word	0x0800137c
 8000d3c:	0800133c 	.word	0x0800133c

08000d40 <std>:
 8000d40:	2300      	movs	r3, #0
 8000d42:	b510      	push	{r4, lr}
 8000d44:	4604      	mov	r4, r0
 8000d46:	e9c0 3300 	strd	r3, r3, [r0]
 8000d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d4e:	6083      	str	r3, [r0, #8]
 8000d50:	8181      	strh	r1, [r0, #12]
 8000d52:	6643      	str	r3, [r0, #100]	; 0x64
 8000d54:	81c2      	strh	r2, [r0, #14]
 8000d56:	6183      	str	r3, [r0, #24]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	305c      	adds	r0, #92	; 0x5c
 8000d5e:	f7ff fdef 	bl	8000940 <memset>
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <std+0x38>)
 8000d64:	6263      	str	r3, [r4, #36]	; 0x24
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <std+0x3c>)
 8000d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <std+0x40>)
 8000d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <std+0x44>)
 8000d70:	6224      	str	r4, [r4, #32]
 8000d72:	6323      	str	r3, [r4, #48]	; 0x30
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	bf00      	nop
 8000d78:	08001169 	.word	0x08001169
 8000d7c:	0800118b 	.word	0x0800118b
 8000d80:	080011c3 	.word	0x080011c3
 8000d84:	080011e7 	.word	0x080011e7

08000d88 <_cleanup_r>:
 8000d88:	4901      	ldr	r1, [pc, #4]	; (8000d90 <_cleanup_r+0x8>)
 8000d8a:	f000 b8af 	b.w	8000eec <_fwalk_reent>
 8000d8e:	bf00      	nop
 8000d90:	08000cc9 	.word	0x08000cc9

08000d94 <__sfmoreglue>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	1e4a      	subs	r2, r1, #1
 8000d98:	2568      	movs	r5, #104	; 0x68
 8000d9a:	4355      	muls	r5, r2
 8000d9c:	460e      	mov	r6, r1
 8000d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000da2:	f000 f977 	bl	8001094 <_malloc_r>
 8000da6:	4604      	mov	r4, r0
 8000da8:	b140      	cbz	r0, 8000dbc <__sfmoreglue+0x28>
 8000daa:	2100      	movs	r1, #0
 8000dac:	e9c0 1600 	strd	r1, r6, [r0]
 8000db0:	300c      	adds	r0, #12
 8000db2:	60a0      	str	r0, [r4, #8]
 8000db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000db8:	f7ff fdc2 	bl	8000940 <memset>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}

08000dc0 <__sfp_lock_acquire>:
 8000dc0:	4801      	ldr	r0, [pc, #4]	; (8000dc8 <__sfp_lock_acquire+0x8>)
 8000dc2:	f000 b8b3 	b.w	8000f2c <__retarget_lock_acquire_recursive>
 8000dc6:	bf00      	nop
 8000dc8:	200000e0 	.word	0x200000e0

08000dcc <__sfp_lock_release>:
 8000dcc:	4801      	ldr	r0, [pc, #4]	; (8000dd4 <__sfp_lock_release+0x8>)
 8000dce:	f000 b8ae 	b.w	8000f2e <__retarget_lock_release_recursive>
 8000dd2:	bf00      	nop
 8000dd4:	200000e0 	.word	0x200000e0

08000dd8 <__sinit_lock_acquire>:
 8000dd8:	4801      	ldr	r0, [pc, #4]	; (8000de0 <__sinit_lock_acquire+0x8>)
 8000dda:	f000 b8a7 	b.w	8000f2c <__retarget_lock_acquire_recursive>
 8000dde:	bf00      	nop
 8000de0:	200000db 	.word	0x200000db

08000de4 <__sinit_lock_release>:
 8000de4:	4801      	ldr	r0, [pc, #4]	; (8000dec <__sinit_lock_release+0x8>)
 8000de6:	f000 b8a2 	b.w	8000f2e <__retarget_lock_release_recursive>
 8000dea:	bf00      	nop
 8000dec:	200000db 	.word	0x200000db

08000df0 <__sinit>:
 8000df0:	b510      	push	{r4, lr}
 8000df2:	4604      	mov	r4, r0
 8000df4:	f7ff fff0 	bl	8000dd8 <__sinit_lock_acquire>
 8000df8:	69a3      	ldr	r3, [r4, #24]
 8000dfa:	b11b      	cbz	r3, 8000e04 <__sinit+0x14>
 8000dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e00:	f7ff bff0 	b.w	8000de4 <__sinit_lock_release>
 8000e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e08:	6523      	str	r3, [r4, #80]	; 0x50
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <__sinit+0x68>)
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <__sinit+0x6c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e12:	42a3      	cmp	r3, r4
 8000e14:	bf04      	itt	eq
 8000e16:	2301      	moveq	r3, #1
 8000e18:	61a3      	streq	r3, [r4, #24]
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 f820 	bl	8000e60 <__sfp>
 8000e20:	6060      	str	r0, [r4, #4]
 8000e22:	4620      	mov	r0, r4
 8000e24:	f000 f81c 	bl	8000e60 <__sfp>
 8000e28:	60a0      	str	r0, [r4, #8]
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f000 f818 	bl	8000e60 <__sfp>
 8000e30:	2200      	movs	r2, #0
 8000e32:	60e0      	str	r0, [r4, #12]
 8000e34:	2104      	movs	r1, #4
 8000e36:	6860      	ldr	r0, [r4, #4]
 8000e38:	f7ff ff82 	bl	8000d40 <std>
 8000e3c:	68a0      	ldr	r0, [r4, #8]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2109      	movs	r1, #9
 8000e42:	f7ff ff7d 	bl	8000d40 <std>
 8000e46:	68e0      	ldr	r0, [r4, #12]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	2112      	movs	r1, #18
 8000e4c:	f7ff ff78 	bl	8000d40 <std>
 8000e50:	2301      	movs	r3, #1
 8000e52:	61a3      	str	r3, [r4, #24]
 8000e54:	e7d2      	b.n	8000dfc <__sinit+0xc>
 8000e56:	bf00      	nop
 8000e58:	08001338 	.word	0x08001338
 8000e5c:	08000d89 	.word	0x08000d89

08000e60 <__sfp>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	4607      	mov	r7, r0
 8000e64:	f7ff ffac 	bl	8000dc0 <__sfp_lock_acquire>
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <__sfp+0x84>)
 8000e6a:	681e      	ldr	r6, [r3, #0]
 8000e6c:	69b3      	ldr	r3, [r6, #24]
 8000e6e:	b913      	cbnz	r3, 8000e76 <__sfp+0x16>
 8000e70:	4630      	mov	r0, r6
 8000e72:	f7ff ffbd 	bl	8000df0 <__sinit>
 8000e76:	3648      	adds	r6, #72	; 0x48
 8000e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	d503      	bpl.n	8000e88 <__sfp+0x28>
 8000e80:	6833      	ldr	r3, [r6, #0]
 8000e82:	b30b      	cbz	r3, 8000ec8 <__sfp+0x68>
 8000e84:	6836      	ldr	r6, [r6, #0]
 8000e86:	e7f7      	b.n	8000e78 <__sfp+0x18>
 8000e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e8c:	b9d5      	cbnz	r5, 8000ec4 <__sfp+0x64>
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <__sfp+0x88>)
 8000e90:	60e3      	str	r3, [r4, #12]
 8000e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e96:	6665      	str	r5, [r4, #100]	; 0x64
 8000e98:	f000 f847 	bl	8000f2a <__retarget_lock_init_recursive>
 8000e9c:	f7ff ff96 	bl	8000dcc <__sfp_lock_release>
 8000ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ea8:	6025      	str	r5, [r4, #0]
 8000eaa:	61a5      	str	r5, [r4, #24]
 8000eac:	2208      	movs	r2, #8
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000eb4:	f7ff fd44 	bl	8000940 <memset>
 8000eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec4:	3468      	adds	r4, #104	; 0x68
 8000ec6:	e7d9      	b.n	8000e7c <__sfp+0x1c>
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4638      	mov	r0, r7
 8000ecc:	f7ff ff62 	bl	8000d94 <__sfmoreglue>
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	6030      	str	r0, [r6, #0]
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	d1d5      	bne.n	8000e84 <__sfp+0x24>
 8000ed8:	f7ff ff78 	bl	8000dcc <__sfp_lock_release>
 8000edc:	230c      	movs	r3, #12
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	e7ee      	b.n	8000ec0 <__sfp+0x60>
 8000ee2:	bf00      	nop
 8000ee4:	08001338 	.word	0x08001338
 8000ee8:	ffff0001 	.word	0xffff0001

08000eec <_fwalk_reent>:
 8000eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	4688      	mov	r8, r1
 8000ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ef8:	2700      	movs	r7, #0
 8000efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000efe:	f1b9 0901 	subs.w	r9, r9, #1
 8000f02:	d505      	bpl.n	8000f10 <_fwalk_reent+0x24>
 8000f04:	6824      	ldr	r4, [r4, #0]
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d1f7      	bne.n	8000efa <_fwalk_reent+0xe>
 8000f0a:	4638      	mov	r0, r7
 8000f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f10:	89ab      	ldrh	r3, [r5, #12]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d907      	bls.n	8000f26 <_fwalk_reent+0x3a>
 8000f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	d003      	beq.n	8000f26 <_fwalk_reent+0x3a>
 8000f1e:	4629      	mov	r1, r5
 8000f20:	4630      	mov	r0, r6
 8000f22:	47c0      	blx	r8
 8000f24:	4307      	orrs	r7, r0
 8000f26:	3568      	adds	r5, #104	; 0x68
 8000f28:	e7e9      	b.n	8000efe <_fwalk_reent+0x12>

08000f2a <__retarget_lock_init_recursive>:
 8000f2a:	4770      	bx	lr

08000f2c <__retarget_lock_acquire_recursive>:
 8000f2c:	4770      	bx	lr

08000f2e <__retarget_lock_release_recursive>:
 8000f2e:	4770      	bx	lr

08000f30 <__swhatbuf_r>:
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	460e      	mov	r6, r1
 8000f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	b096      	sub	sp, #88	; 0x58
 8000f3c:	4614      	mov	r4, r2
 8000f3e:	461d      	mov	r5, r3
 8000f40:	da07      	bge.n	8000f52 <__swhatbuf_r+0x22>
 8000f42:	2300      	movs	r3, #0
 8000f44:	602b      	str	r3, [r5, #0]
 8000f46:	89b3      	ldrh	r3, [r6, #12]
 8000f48:	061a      	lsls	r2, r3, #24
 8000f4a:	d410      	bmi.n	8000f6e <__swhatbuf_r+0x3e>
 8000f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f50:	e00e      	b.n	8000f70 <__swhatbuf_r+0x40>
 8000f52:	466a      	mov	r2, sp
 8000f54:	f000 f96e 	bl	8001234 <_fstat_r>
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	dbf2      	blt.n	8000f42 <__swhatbuf_r+0x12>
 8000f5c:	9a01      	ldr	r2, [sp, #4]
 8000f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f66:	425a      	negs	r2, r3
 8000f68:	415a      	adcs	r2, r3
 8000f6a:	602a      	str	r2, [r5, #0]
 8000f6c:	e7ee      	b.n	8000f4c <__swhatbuf_r+0x1c>
 8000f6e:	2340      	movs	r3, #64	; 0x40
 8000f70:	2000      	movs	r0, #0
 8000f72:	6023      	str	r3, [r4, #0]
 8000f74:	b016      	add	sp, #88	; 0x58
 8000f76:	bd70      	pop	{r4, r5, r6, pc}

08000f78 <__smakebuf_r>:
 8000f78:	898b      	ldrh	r3, [r1, #12]
 8000f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f7c:	079d      	lsls	r5, r3, #30
 8000f7e:	4606      	mov	r6, r0
 8000f80:	460c      	mov	r4, r1
 8000f82:	d507      	bpl.n	8000f94 <__smakebuf_r+0x1c>
 8000f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	6123      	str	r3, [r4, #16]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	6163      	str	r3, [r4, #20]
 8000f90:	b002      	add	sp, #8
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
 8000f94:	ab01      	add	r3, sp, #4
 8000f96:	466a      	mov	r2, sp
 8000f98:	f7ff ffca 	bl	8000f30 <__swhatbuf_r>
 8000f9c:	9900      	ldr	r1, [sp, #0]
 8000f9e:	4605      	mov	r5, r0
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f000 f877 	bl	8001094 <_malloc_r>
 8000fa6:	b948      	cbnz	r0, 8000fbc <__smakebuf_r+0x44>
 8000fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fac:	059a      	lsls	r2, r3, #22
 8000fae:	d4ef      	bmi.n	8000f90 <__smakebuf_r+0x18>
 8000fb0:	f023 0303 	bic.w	r3, r3, #3
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	81a3      	strh	r3, [r4, #12]
 8000fba:	e7e3      	b.n	8000f84 <__smakebuf_r+0xc>
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <__smakebuf_r+0x7c>)
 8000fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	6020      	str	r0, [r4, #0]
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	81a3      	strh	r3, [r4, #12]
 8000fca:	9b00      	ldr	r3, [sp, #0]
 8000fcc:	6163      	str	r3, [r4, #20]
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	6120      	str	r0, [r4, #16]
 8000fd2:	b15b      	cbz	r3, 8000fec <__smakebuf_r+0x74>
 8000fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f000 f93d 	bl	8001258 <_isatty_r>
 8000fde:	b128      	cbz	r0, 8000fec <__smakebuf_r+0x74>
 8000fe0:	89a3      	ldrh	r3, [r4, #12]
 8000fe2:	f023 0303 	bic.w	r3, r3, #3
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	81a3      	strh	r3, [r4, #12]
 8000fec:	89a0      	ldrh	r0, [r4, #12]
 8000fee:	4305      	orrs	r5, r0
 8000ff0:	81a5      	strh	r5, [r4, #12]
 8000ff2:	e7cd      	b.n	8000f90 <__smakebuf_r+0x18>
 8000ff4:	08000d89 	.word	0x08000d89

08000ff8 <_free_r>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	2900      	cmp	r1, #0
 8000ffe:	d045      	beq.n	800108c <_free_r+0x94>
 8001000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001004:	1f0c      	subs	r4, r1, #4
 8001006:	2b00      	cmp	r3, #0
 8001008:	bfb8      	it	lt
 800100a:	18e4      	addlt	r4, r4, r3
 800100c:	f000 f946 	bl	800129c <__malloc_lock>
 8001010:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <_free_r+0x98>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	4610      	mov	r0, r2
 8001016:	b933      	cbnz	r3, 8001026 <_free_r+0x2e>
 8001018:	6063      	str	r3, [r4, #4]
 800101a:	6014      	str	r4, [r2, #0]
 800101c:	4628      	mov	r0, r5
 800101e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001022:	f000 b941 	b.w	80012a8 <__malloc_unlock>
 8001026:	42a3      	cmp	r3, r4
 8001028:	d90b      	bls.n	8001042 <_free_r+0x4a>
 800102a:	6821      	ldr	r1, [r4, #0]
 800102c:	1862      	adds	r2, r4, r1
 800102e:	4293      	cmp	r3, r2
 8001030:	bf04      	itt	eq
 8001032:	681a      	ldreq	r2, [r3, #0]
 8001034:	685b      	ldreq	r3, [r3, #4]
 8001036:	6063      	str	r3, [r4, #4]
 8001038:	bf04      	itt	eq
 800103a:	1852      	addeq	r2, r2, r1
 800103c:	6022      	streq	r2, [r4, #0]
 800103e:	6004      	str	r4, [r0, #0]
 8001040:	e7ec      	b.n	800101c <_free_r+0x24>
 8001042:	461a      	mov	r2, r3
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	b10b      	cbz	r3, 800104c <_free_r+0x54>
 8001048:	42a3      	cmp	r3, r4
 800104a:	d9fa      	bls.n	8001042 <_free_r+0x4a>
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	1850      	adds	r0, r2, r1
 8001050:	42a0      	cmp	r0, r4
 8001052:	d10b      	bne.n	800106c <_free_r+0x74>
 8001054:	6820      	ldr	r0, [r4, #0]
 8001056:	4401      	add	r1, r0
 8001058:	1850      	adds	r0, r2, r1
 800105a:	4283      	cmp	r3, r0
 800105c:	6011      	str	r1, [r2, #0]
 800105e:	d1dd      	bne.n	800101c <_free_r+0x24>
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	6053      	str	r3, [r2, #4]
 8001066:	4401      	add	r1, r0
 8001068:	6011      	str	r1, [r2, #0]
 800106a:	e7d7      	b.n	800101c <_free_r+0x24>
 800106c:	d902      	bls.n	8001074 <_free_r+0x7c>
 800106e:	230c      	movs	r3, #12
 8001070:	602b      	str	r3, [r5, #0]
 8001072:	e7d3      	b.n	800101c <_free_r+0x24>
 8001074:	6820      	ldr	r0, [r4, #0]
 8001076:	1821      	adds	r1, r4, r0
 8001078:	428b      	cmp	r3, r1
 800107a:	bf04      	itt	eq
 800107c:	6819      	ldreq	r1, [r3, #0]
 800107e:	685b      	ldreq	r3, [r3, #4]
 8001080:	6063      	str	r3, [r4, #4]
 8001082:	bf04      	itt	eq
 8001084:	1809      	addeq	r1, r1, r0
 8001086:	6021      	streq	r1, [r4, #0]
 8001088:	6054      	str	r4, [r2, #4]
 800108a:	e7c7      	b.n	800101c <_free_r+0x24>
 800108c:	bd38      	pop	{r3, r4, r5, pc}
 800108e:	bf00      	nop
 8001090:	20000090 	.word	0x20000090

08001094 <_malloc_r>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	1ccd      	adds	r5, r1, #3
 8001098:	f025 0503 	bic.w	r5, r5, #3
 800109c:	3508      	adds	r5, #8
 800109e:	2d0c      	cmp	r5, #12
 80010a0:	bf38      	it	cc
 80010a2:	250c      	movcc	r5, #12
 80010a4:	2d00      	cmp	r5, #0
 80010a6:	4606      	mov	r6, r0
 80010a8:	db01      	blt.n	80010ae <_malloc_r+0x1a>
 80010aa:	42a9      	cmp	r1, r5
 80010ac:	d903      	bls.n	80010b6 <_malloc_r+0x22>
 80010ae:	230c      	movs	r3, #12
 80010b0:	6033      	str	r3, [r6, #0]
 80010b2:	2000      	movs	r0, #0
 80010b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010b6:	f000 f8f1 	bl	800129c <__malloc_lock>
 80010ba:	4921      	ldr	r1, [pc, #132]	; (8001140 <_malloc_r+0xac>)
 80010bc:	680a      	ldr	r2, [r1, #0]
 80010be:	4614      	mov	r4, r2
 80010c0:	b99c      	cbnz	r4, 80010ea <_malloc_r+0x56>
 80010c2:	4f20      	ldr	r7, [pc, #128]	; (8001144 <_malloc_r+0xb0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b923      	cbnz	r3, 80010d2 <_malloc_r+0x3e>
 80010c8:	4621      	mov	r1, r4
 80010ca:	4630      	mov	r0, r6
 80010cc:	f000 f83c 	bl	8001148 <_sbrk_r>
 80010d0:	6038      	str	r0, [r7, #0]
 80010d2:	4629      	mov	r1, r5
 80010d4:	4630      	mov	r0, r6
 80010d6:	f000 f837 	bl	8001148 <_sbrk_r>
 80010da:	1c43      	adds	r3, r0, #1
 80010dc:	d123      	bne.n	8001126 <_malloc_r+0x92>
 80010de:	230c      	movs	r3, #12
 80010e0:	6033      	str	r3, [r6, #0]
 80010e2:	4630      	mov	r0, r6
 80010e4:	f000 f8e0 	bl	80012a8 <__malloc_unlock>
 80010e8:	e7e3      	b.n	80010b2 <_malloc_r+0x1e>
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	1b5b      	subs	r3, r3, r5
 80010ee:	d417      	bmi.n	8001120 <_malloc_r+0x8c>
 80010f0:	2b0b      	cmp	r3, #11
 80010f2:	d903      	bls.n	80010fc <_malloc_r+0x68>
 80010f4:	6023      	str	r3, [r4, #0]
 80010f6:	441c      	add	r4, r3
 80010f8:	6025      	str	r5, [r4, #0]
 80010fa:	e004      	b.n	8001106 <_malloc_r+0x72>
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	42a2      	cmp	r2, r4
 8001100:	bf0c      	ite	eq
 8001102:	600b      	streq	r3, [r1, #0]
 8001104:	6053      	strne	r3, [r2, #4]
 8001106:	4630      	mov	r0, r6
 8001108:	f000 f8ce 	bl	80012a8 <__malloc_unlock>
 800110c:	f104 000b 	add.w	r0, r4, #11
 8001110:	1d23      	adds	r3, r4, #4
 8001112:	f020 0007 	bic.w	r0, r0, #7
 8001116:	1ac2      	subs	r2, r0, r3
 8001118:	d0cc      	beq.n	80010b4 <_malloc_r+0x20>
 800111a:	1a1b      	subs	r3, r3, r0
 800111c:	50a3      	str	r3, [r4, r2]
 800111e:	e7c9      	b.n	80010b4 <_malloc_r+0x20>
 8001120:	4622      	mov	r2, r4
 8001122:	6864      	ldr	r4, [r4, #4]
 8001124:	e7cc      	b.n	80010c0 <_malloc_r+0x2c>
 8001126:	1cc4      	adds	r4, r0, #3
 8001128:	f024 0403 	bic.w	r4, r4, #3
 800112c:	42a0      	cmp	r0, r4
 800112e:	d0e3      	beq.n	80010f8 <_malloc_r+0x64>
 8001130:	1a21      	subs	r1, r4, r0
 8001132:	4630      	mov	r0, r6
 8001134:	f000 f808 	bl	8001148 <_sbrk_r>
 8001138:	3001      	adds	r0, #1
 800113a:	d1dd      	bne.n	80010f8 <_malloc_r+0x64>
 800113c:	e7cf      	b.n	80010de <_malloc_r+0x4a>
 800113e:	bf00      	nop
 8001140:	20000090 	.word	0x20000090
 8001144:	20000094 	.word	0x20000094

08001148 <_sbrk_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4d06      	ldr	r5, [pc, #24]	; (8001164 <_sbrk_r+0x1c>)
 800114c:	2300      	movs	r3, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	602b      	str	r3, [r5, #0]
 8001154:	f7ff fb6a 	bl	800082c <_sbrk>
 8001158:	1c43      	adds	r3, r0, #1
 800115a:	d102      	bne.n	8001162 <_sbrk_r+0x1a>
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	b103      	cbz	r3, 8001162 <_sbrk_r+0x1a>
 8001160:	6023      	str	r3, [r4, #0]
 8001162:	bd38      	pop	{r3, r4, r5, pc}
 8001164:	200000e4 	.word	0x200000e4

08001168 <__sread>:
 8001168:	b510      	push	{r4, lr}
 800116a:	460c      	mov	r4, r1
 800116c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001170:	f000 f8a0 	bl	80012b4 <_read_r>
 8001174:	2800      	cmp	r0, #0
 8001176:	bfab      	itete	ge
 8001178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800117a:	89a3      	ldrhlt	r3, [r4, #12]
 800117c:	181b      	addge	r3, r3, r0
 800117e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001182:	bfac      	ite	ge
 8001184:	6563      	strge	r3, [r4, #84]	; 0x54
 8001186:	81a3      	strhlt	r3, [r4, #12]
 8001188:	bd10      	pop	{r4, pc}

0800118a <__swrite>:
 800118a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118e:	461f      	mov	r7, r3
 8001190:	898b      	ldrh	r3, [r1, #12]
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	4605      	mov	r5, r0
 8001196:	460c      	mov	r4, r1
 8001198:	4616      	mov	r6, r2
 800119a:	d505      	bpl.n	80011a8 <__swrite+0x1e>
 800119c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011a0:	2302      	movs	r3, #2
 80011a2:	2200      	movs	r2, #0
 80011a4:	f000 f868 	bl	8001278 <_lseek_r>
 80011a8:	89a3      	ldrh	r3, [r4, #12]
 80011aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011b2:	81a3      	strh	r3, [r4, #12]
 80011b4:	4632      	mov	r2, r6
 80011b6:	463b      	mov	r3, r7
 80011b8:	4628      	mov	r0, r5
 80011ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011be:	f000 b817 	b.w	80011f0 <_write_r>

080011c2 <__sseek>:
 80011c2:	b510      	push	{r4, lr}
 80011c4:	460c      	mov	r4, r1
 80011c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ca:	f000 f855 	bl	8001278 <_lseek_r>
 80011ce:	1c43      	adds	r3, r0, #1
 80011d0:	89a3      	ldrh	r3, [r4, #12]
 80011d2:	bf15      	itete	ne
 80011d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80011d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011de:	81a3      	strheq	r3, [r4, #12]
 80011e0:	bf18      	it	ne
 80011e2:	81a3      	strhne	r3, [r4, #12]
 80011e4:	bd10      	pop	{r4, pc}

080011e6 <__sclose>:
 80011e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ea:	f000 b813 	b.w	8001214 <_close_r>
	...

080011f0 <_write_r>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	4d07      	ldr	r5, [pc, #28]	; (8001210 <_write_r+0x20>)
 80011f4:	4604      	mov	r4, r0
 80011f6:	4608      	mov	r0, r1
 80011f8:	4611      	mov	r1, r2
 80011fa:	2200      	movs	r2, #0
 80011fc:	602a      	str	r2, [r5, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	f7ff fac7 	bl	8000792 <_write>
 8001204:	1c43      	adds	r3, r0, #1
 8001206:	d102      	bne.n	800120e <_write_r+0x1e>
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	b103      	cbz	r3, 800120e <_write_r+0x1e>
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	bd38      	pop	{r3, r4, r5, pc}
 8001210:	200000e4 	.word	0x200000e4

08001214 <_close_r>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4d06      	ldr	r5, [pc, #24]	; (8001230 <_close_r+0x1c>)
 8001218:	2300      	movs	r3, #0
 800121a:	4604      	mov	r4, r0
 800121c:	4608      	mov	r0, r1
 800121e:	602b      	str	r3, [r5, #0]
 8001220:	f7ff fad3 	bl	80007ca <_close>
 8001224:	1c43      	adds	r3, r0, #1
 8001226:	d102      	bne.n	800122e <_close_r+0x1a>
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	b103      	cbz	r3, 800122e <_close_r+0x1a>
 800122c:	6023      	str	r3, [r4, #0]
 800122e:	bd38      	pop	{r3, r4, r5, pc}
 8001230:	200000e4 	.word	0x200000e4

08001234 <_fstat_r>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4d07      	ldr	r5, [pc, #28]	; (8001254 <_fstat_r+0x20>)
 8001238:	2300      	movs	r3, #0
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	602b      	str	r3, [r5, #0]
 8001242:	f7ff facd 	bl	80007e0 <_fstat>
 8001246:	1c43      	adds	r3, r0, #1
 8001248:	d102      	bne.n	8001250 <_fstat_r+0x1c>
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	b103      	cbz	r3, 8001250 <_fstat_r+0x1c>
 800124e:	6023      	str	r3, [r4, #0]
 8001250:	bd38      	pop	{r3, r4, r5, pc}
 8001252:	bf00      	nop
 8001254:	200000e4 	.word	0x200000e4

08001258 <_isatty_r>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4d06      	ldr	r5, [pc, #24]	; (8001274 <_isatty_r+0x1c>)
 800125c:	2300      	movs	r3, #0
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	f7ff facb 	bl	80007fe <_isatty>
 8001268:	1c43      	adds	r3, r0, #1
 800126a:	d102      	bne.n	8001272 <_isatty_r+0x1a>
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	b103      	cbz	r3, 8001272 <_isatty_r+0x1a>
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	bd38      	pop	{r3, r4, r5, pc}
 8001274:	200000e4 	.word	0x200000e4

08001278 <_lseek_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	4d07      	ldr	r5, [pc, #28]	; (8001298 <_lseek_r+0x20>)
 800127c:	4604      	mov	r4, r0
 800127e:	4608      	mov	r0, r1
 8001280:	4611      	mov	r1, r2
 8001282:	2200      	movs	r2, #0
 8001284:	602a      	str	r2, [r5, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	f7ff fac3 	bl	8000812 <_lseek>
 800128c:	1c43      	adds	r3, r0, #1
 800128e:	d102      	bne.n	8001296 <_lseek_r+0x1e>
 8001290:	682b      	ldr	r3, [r5, #0]
 8001292:	b103      	cbz	r3, 8001296 <_lseek_r+0x1e>
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	bd38      	pop	{r3, r4, r5, pc}
 8001298:	200000e4 	.word	0x200000e4

0800129c <__malloc_lock>:
 800129c:	4801      	ldr	r0, [pc, #4]	; (80012a4 <__malloc_lock+0x8>)
 800129e:	f7ff be45 	b.w	8000f2c <__retarget_lock_acquire_recursive>
 80012a2:	bf00      	nop
 80012a4:	200000dc 	.word	0x200000dc

080012a8 <__malloc_unlock>:
 80012a8:	4801      	ldr	r0, [pc, #4]	; (80012b0 <__malloc_unlock+0x8>)
 80012aa:	f7ff be40 	b.w	8000f2e <__retarget_lock_release_recursive>
 80012ae:	bf00      	nop
 80012b0:	200000dc 	.word	0x200000dc

080012b4 <_read_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4d07      	ldr	r5, [pc, #28]	; (80012d4 <_read_r+0x20>)
 80012b8:	4604      	mov	r4, r0
 80012ba:	4608      	mov	r0, r1
 80012bc:	4611      	mov	r1, r2
 80012be:	2200      	movs	r2, #0
 80012c0:	602a      	str	r2, [r5, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	f7ff fa48 	bl	8000758 <_read>
 80012c8:	1c43      	adds	r3, r0, #1
 80012ca:	d102      	bne.n	80012d2 <_read_r+0x1e>
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	b103      	cbz	r3, 80012d2 <_read_r+0x1e>
 80012d0:	6023      	str	r3, [r4, #0]
 80012d2:	bd38      	pop	{r3, r4, r5, pc}
 80012d4:	200000e4 	.word	0x200000e4

080012d8 <_init>:
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012da:	bf00      	nop
 80012dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012de:	bc08      	pop	{r3}
 80012e0:	469e      	mov	lr, r3
 80012e2:	4770      	bx	lr

080012e4 <_fini>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	bf00      	nop
 80012e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ea:	bc08      	pop	{r3}
 80012ec:	469e      	mov	lr, r3
 80012ee:	4770      	bx	lr
